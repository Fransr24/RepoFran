
Prueba_Leds.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001c64  08001c64  00011c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c84  08001c84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c84  08001c84  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c84  08001c84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c84  08001c84  00011c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c88  08001c88  00011c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  08001c98  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08001c98  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000566a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000140c  00000000  00000000  0002569f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000660  00000000  00000000  00026ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b8  00000000  00000000  00027110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000153de  00000000  00000000  000276c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007019  00000000  00000000  0003caa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d931  00000000  00000000  00043abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c13f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001880  00000000  00000000  000c1440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001c4c 	.word	0x08001c4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001c4c 	.word	0x08001c4c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint8_t i = 4;
 8000152:	2304      	movs	r3, #4
 8000154:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fafd 	bl	8000754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f841 	bl	80001e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f8d1 	bl	8000304 <MX_GPIO_Init>
  MX_DMA_Init();
 8000162:	f000 f8b9 	bl	80002d8 <MX_DMA_Init>
  MX_SPI2_Init();
 8000166:	f000 f881 	bl	800026c <MX_SPI2_Init>
  while (1)
  {

	  //TC1 transferencia completa canal 1
	  //HT1 transferencia por la mitad canal 1
	  if(__HAL_DMA_GET_FLAG(hspi2->hdmatx,DMA_FLAG_TC5))
 800016a:	4b1a      	ldr	r3, [pc, #104]	; (80001d4 <main+0x88>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000172:	2b00      	cmp	r3, #0
 8000174:	d017      	beq.n	80001a6 <main+0x5a>
	  	{
	  		 // Si entré acá es porque el dma llegó al final del buffer
	  		 //(reinicia solo pero tengo que liberar el flag)
	  		__HAL_DMA_CLEAR_FLAG(hspi2->hdmatx,DMA_FLAG_TC5|DMA_FLAG_HT5|DMA_FLAG_TE5);
 8000176:	4b17      	ldr	r3, [pc, #92]	; (80001d4 <main+0x88>)
 8000178:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017c:	605a      	str	r2, [r3, #4]
		  	hspi2.State = HAL_DMA_STATE_READY;
 800017e:	4b16      	ldr	r3, [pc, #88]	; (80001d8 <main+0x8c>)
 8000180:	2201      	movs	r2, #1
 8000182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		  	hspi2.hdmatx->State = HAL_DMA_STATE_READY;
 8000186:	4b14      	ldr	r3, [pc, #80]	; (80001d8 <main+0x8c>)
 8000188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800018a:	2201      	movs	r2, #1
 800018c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		  	hspi2.hdmatx->Lock = HAL_UNLOCKED;
 8000190:	4b11      	ldr	r3, [pc, #68]	; (80001d8 <main+0x8c>)
 8000192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000194:	2200      	movs	r2, #0
 8000196:	f883 2020 	strb.w	r2, [r3, #32]
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800019a:	2201      	movs	r2, #1
 800019c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001a0:	480e      	ldr	r0, [pc, #56]	; (80001dc <main+0x90>)
 80001a2:	f000 feab 	bl	8000efc <HAL_GPIO_WritePin>
	  	}

	  TLC_data_cero();
 80001a6:	f000 f8f9 	bl	800039c <TLC_data_cero>
	  set_led_val(i,0xFFF);
 80001aa:	79fb      	ldrb	r3, [r7, #7]
 80001ac:	f640 71ff 	movw	r1, #4095	; 0xfff
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 f90f 	bl	80003d4 <set_led_val>
	  enviarDatos();
 80001b6:	f000 f9bb 	bl	8000530 <enviarDatos>
	  HAL_Delay(500);
 80001ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001be:	f000 fb2b 	bl	8000818 <HAL_Delay>
	  i++;
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	3301      	adds	r3, #1
 80001c6:	71fb      	strb	r3, [r7, #7]
	  if (i == 24)
 80001c8:	79fb      	ldrb	r3, [r7, #7]
 80001ca:	2b18      	cmp	r3, #24
 80001cc:	d1cd      	bne.n	800016a <main+0x1e>
	  {
		  i = 4;
 80001ce:	2304      	movs	r3, #4
 80001d0:	71fb      	strb	r3, [r7, #7]
	  if(__HAL_DMA_GET_FLAG(hspi2->hdmatx,DMA_FLAG_TC5))
 80001d2:	e7ca      	b.n	800016a <main+0x1e>
 80001d4:	40020000 	.word	0x40020000
 80001d8:	20000028 	.word	0x20000028
 80001dc:	40010c00 	.word	0x40010c00

080001e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b090      	sub	sp, #64	; 0x40
 80001e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e6:	f107 0318 	add.w	r3, r7, #24
 80001ea:	2228      	movs	r2, #40	; 0x28
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f001 fd24 	bl	8001c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]
 8000200:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000202:	2301      	movs	r3, #1
 8000204:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000210:	2301      	movs	r3, #1
 8000212:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000214:	2302      	movs	r3, #2
 8000216:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800021e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000222:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000224:	f107 0318 	add.w	r3, r7, #24
 8000228:	4618      	mov	r0, r3
 800022a:	f000 fe7f 	bl	8000f2c <HAL_RCC_OscConfig>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000234:	f000 f998 	bl	8000568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000238:	230f      	movs	r3, #15
 800023a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800023c:	2302      	movs	r3, #2
 800023e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2102      	movs	r1, #2
 8000252:	4618      	mov	r0, r3
 8000254:	f001 f8ec 	bl	8001430 <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800025e:	f000 f983 	bl	8000568 <Error_Handler>
  }
}
 8000262:	bf00      	nop
 8000264:	3740      	adds	r7, #64	; 0x40
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000270:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <MX_SPI2_Init+0x64>)
 8000272:	4a18      	ldr	r2, [pc, #96]	; (80002d4 <MX_SPI2_Init+0x68>)
 8000274:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000276:	4b16      	ldr	r3, [pc, #88]	; (80002d0 <MX_SPI2_Init+0x64>)
 8000278:	f44f 7282 	mov.w	r2, #260	; 0x104
 800027c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800027e:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <MX_SPI2_Init+0x64>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <MX_SPI2_Init+0x64>)
 8000286:	2200      	movs	r2, #0
 8000288:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <MX_SPI2_Init+0x64>)
 800028c:	2202      	movs	r2, #2
 800028e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000290:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <MX_SPI2_Init+0x64>)
 8000292:	2200      	movs	r2, #0
 8000294:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <MX_SPI2_Init+0x64>)
 8000298:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800029c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800029e:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <MX_SPI2_Init+0x64>)
 80002a0:	2208      	movs	r2, #8
 80002a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80002a4:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <MX_SPI2_Init+0x64>)
 80002a6:	2280      	movs	r2, #128	; 0x80
 80002a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80002aa:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <MX_SPI2_Init+0x64>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002b0:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <MX_SPI2_Init+0x64>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80002b6:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <MX_SPI2_Init+0x64>)
 80002b8:	220a      	movs	r2, #10
 80002ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <MX_SPI2_Init+0x64>)
 80002be:	f001 fa1d 	bl	80016fc <HAL_SPI_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80002c8:	f000 f94e 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000028 	.word	0x20000028
 80002d4:	40003800 	.word	0x40003800

080002d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <MX_DMA_Init+0x28>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a07      	ldr	r2, [pc, #28]	; (8000300 <MX_DMA_Init+0x28>)
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b05      	ldr	r3, [pc, #20]	; (8000300 <MX_DMA_Init+0x28>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	40021000 	.word	0x40021000

08000304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030a:	f107 0310 	add.w	r3, r7, #16
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000318:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <MX_GPIO_Init+0x90>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a1d      	ldr	r2, [pc, #116]	; (8000394 <MX_GPIO_Init+0x90>)
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_GPIO_Init+0x90>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0320 	and.w	r3, r3, #32
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_GPIO_Init+0x90>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a17      	ldr	r2, [pc, #92]	; (8000394 <MX_GPIO_Init+0x90>)
 8000336:	f043 0308 	orr.w	r3, r3, #8
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_GPIO_Init+0x90>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0308 	and.w	r3, r3, #8
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <MX_GPIO_Init+0x90>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a11      	ldr	r2, [pc, #68]	; (8000394 <MX_GPIO_Init+0x90>)
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <MX_GPIO_Init+0x90>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0304 	and.w	r3, r3, #4
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000366:	480c      	ldr	r0, [pc, #48]	; (8000398 <MX_GPIO_Init+0x94>)
 8000368:	f000 fdc8 	bl	8000efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800036c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000372:	2301      	movs	r3, #1
 8000374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000376:	2300      	movs	r3, #0
 8000378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037a:	2302      	movs	r3, #2
 800037c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037e:	f107 0310 	add.w	r3, r7, #16
 8000382:	4619      	mov	r1, r3
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <MX_GPIO_Init+0x94>)
 8000386:	f000 fc35 	bl	8000bf4 <HAL_GPIO_Init>

}
 800038a:	bf00      	nop
 800038c:	3720      	adds	r7, #32
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000
 8000398:	40010c00 	.word	0x40010c00

0800039c <TLC_data_cero>:

/* USER CODE BEGIN 4 */
void TLC_data_cero(void)
 {
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 9; i++)
 80003a6:	2300      	movs	r3, #0
 80003a8:	71fb      	strb	r3, [r7, #7]
 80003aa:	e007      	b.n	80003bc <TLC_data_cero+0x20>
	{
		LEDS_BUFFER[i] = 0;
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	4a08      	ldr	r2, [pc, #32]	; (80003d0 <TLC_data_cero+0x34>)
 80003b0:	2100      	movs	r1, #0
 80003b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < 9; i++)
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	3301      	adds	r3, #1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	2b08      	cmp	r3, #8
 80003c0:	d9f4      	bls.n	80003ac <TLC_data_cero+0x10>
	}
 }
 80003c2:	bf00      	nop
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	200000c4 	.word	0x200000c4

080003d4 <set_led_val>:
		LEDS_BUFFER[i] = 0xFFFFFFFF;
	}
 }

 void set_led_val(uint8_t led_index, uint16_t led_val)
 {
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	460a      	mov	r2, r1
 80003de:	71fb      	strb	r3, [r7, #7]
 80003e0:	4613      	mov	r3, r2
 80003e2:	80bb      	strh	r3, [r7, #4]
	//led_index de dice el numero de led que está, vale de 0 a 23
	//de led_val me importan los ultimos 12 SIEMPRE


	//en cual de LEDS_BUFFER tengo que escribir (de los 9)
	uint8_t buffer_index = (led_index*3) >> 3; // multiplico por 3/8
 80003e4:	79fa      	ldrb	r2, [r7, #7]
 80003e6:	4613      	mov	r3, r2
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	4413      	add	r3, r2
 80003ec:	10db      	asrs	r3, r3, #3
 80003ee:	73fb      	strb	r3, [r7, #15]
	uint8_t shift_index = (led_index*12)-(32*buffer_index);
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	461a      	mov	r2, r3
 80003f4:	0052      	lsls	r2, r2, #1
 80003f6:	4413      	add	r3, r2
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	015b      	lsls	r3, r3, #5
 8000400:	b2db      	uxtb	r3, r3
 8000402:	1ad3      	subs	r3, r2, r3
 8000404:	73bb      	strb	r3, [r7, #14]
	led_val &= 0x0FFF;
 8000406:	88bb      	ldrh	r3, [r7, #4]
 8000408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800040c:	80bb      	strh	r3, [r7, #4]

	if ((shift_index != 24) && (shift_index != 28)) //el dato está entero, no se divide en 2 posiciones distintas
 800040e:	7bbb      	ldrb	r3, [r7, #14]
 8000410:	2b18      	cmp	r3, #24
 8000412:	d01e      	beq.n	8000452 <set_led_val+0x7e>
 8000414:	7bbb      	ldrb	r3, [r7, #14]
 8000416:	2b1c      	cmp	r3, #28
 8000418:	d01b      	beq.n	8000452 <set_led_val+0x7e>
	{
		LEDS_BUFFER[buffer_index] &= ~(((0x00000FFF) << (shift_index))); //limpio datos anteriores
 800041a:	7bfb      	ldrb	r3, [r7, #15]
 800041c:	4a43      	ldr	r2, [pc, #268]	; (800052c <set_led_val+0x158>)
 800041e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000422:	7bbb      	ldrb	r3, [r7, #14]
 8000424:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	43db      	mvns	r3, r3
 800042e:	4619      	mov	r1, r3
 8000430:	7bfb      	ldrb	r3, [r7, #15]
 8000432:	400a      	ands	r2, r1
 8000434:	493d      	ldr	r1, [pc, #244]	; (800052c <set_led_val+0x158>)
 8000436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		LEDS_BUFFER[buffer_index] |= ((uint32_t)led_val << (shift_index));
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	4a3b      	ldr	r2, [pc, #236]	; (800052c <set_led_val+0x158>)
 800043e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000442:	88ba      	ldrh	r2, [r7, #4]
 8000444:	7bbb      	ldrb	r3, [r7, #14]
 8000446:	409a      	lsls	r2, r3
 8000448:	7bfb      	ldrb	r3, [r7, #15]
 800044a:	430a      	orrs	r2, r1
 800044c:	4937      	ldr	r1, [pc, #220]	; (800052c <set_led_val+0x158>)
 800044e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
	if (shift_index == 24)
 8000452:	7bbb      	ldrb	r3, [r7, #14]
 8000454:	2b18      	cmp	r3, #24
 8000456:	d130      	bne.n	80004ba <set_led_val+0xe6>
	{
		//caso de 2,10 y 18
		LEDS_BUFFER[buffer_index] &= (0x00FFFFFF); //limpio datos anteriores
 8000458:	7bfb      	ldrb	r3, [r7, #15]
 800045a:	4a34      	ldr	r2, [pc, #208]	; (800052c <set_led_val+0x158>)
 800045c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000466:	4931      	ldr	r1, [pc, #196]	; (800052c <set_led_val+0x158>)
 8000468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		LEDS_BUFFER[buffer_index] |= ((uint32_t)led_val << shift_index); //primeros 8 bits de led_val van aca
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	4a2f      	ldr	r2, [pc, #188]	; (800052c <set_led_val+0x158>)
 8000470:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000474:	88ba      	ldrh	r2, [r7, #4]
 8000476:	7bbb      	ldrb	r3, [r7, #14]
 8000478:	409a      	lsls	r2, r3
 800047a:	7bfb      	ldrb	r3, [r7, #15]
 800047c:	430a      	orrs	r2, r1
 800047e:	492b      	ldr	r1, [pc, #172]	; (800052c <set_led_val+0x158>)
 8000480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		LEDS_BUFFER[buffer_index+1] &= (0xFFFFFFF0); //limpio datos anteriores
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	3301      	adds	r3, #1
 8000488:	4a28      	ldr	r2, [pc, #160]	; (800052c <set_led_val+0x158>)
 800048a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800048e:	7bfb      	ldrb	r3, [r7, #15]
 8000490:	3301      	adds	r3, #1
 8000492:	f022 020f 	bic.w	r2, r2, #15
 8000496:	4925      	ldr	r1, [pc, #148]	; (800052c <set_led_val+0x158>)
 8000498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		LEDS_BUFFER[buffer_index+1] |= ((uint32_t)led_val >> 8); //ultimos 4 bits de led_val van acá
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	3301      	adds	r3, #1
 80004a0:	4a22      	ldr	r2, [pc, #136]	; (800052c <set_led_val+0x158>)
 80004a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004a6:	88bb      	ldrh	r3, [r7, #4]
 80004a8:	0a1b      	lsrs	r3, r3, #8
 80004aa:	b29b      	uxth	r3, r3
 80004ac:	4619      	mov	r1, r3
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	3301      	adds	r3, #1
 80004b2:	430a      	orrs	r2, r1
 80004b4:	491d      	ldr	r1, [pc, #116]	; (800052c <set_led_val+0x158>)
 80004b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
	if (shift_index == 28)
 80004ba:	7bbb      	ldrb	r3, [r7, #14]
 80004bc:	2b1c      	cmp	r3, #28
 80004be:	d130      	bne.n	8000522 <set_led_val+0x14e>
	{
		//caso de 5,13 y 21
		LEDS_BUFFER[buffer_index] &= (0x0FFFFFFF); //limpio datos anteriores
 80004c0:	7bfb      	ldrb	r3, [r7, #15]
 80004c2:	4a1a      	ldr	r2, [pc, #104]	; (800052c <set_led_val+0x158>)
 80004c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
 80004ca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80004ce:	4917      	ldr	r1, [pc, #92]	; (800052c <set_led_val+0x158>)
 80004d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		LEDS_BUFFER[buffer_index] |= ((uint32_t)led_val << shift_index); //primeros 4 bits de led_val van aca
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
 80004d6:	4a15      	ldr	r2, [pc, #84]	; (800052c <set_led_val+0x158>)
 80004d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80004dc:	88ba      	ldrh	r2, [r7, #4]
 80004de:	7bbb      	ldrb	r3, [r7, #14]
 80004e0:	409a      	lsls	r2, r3
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	430a      	orrs	r2, r1
 80004e6:	4911      	ldr	r1, [pc, #68]	; (800052c <set_led_val+0x158>)
 80004e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		LEDS_BUFFER[buffer_index+1] &= (0xFFFFFF00); //limpio datos anteriores
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	3301      	adds	r3, #1
 80004f0:	4a0e      	ldr	r2, [pc, #56]	; (800052c <set_led_val+0x158>)
 80004f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004f6:	7bfb      	ldrb	r3, [r7, #15]
 80004f8:	3301      	adds	r3, #1
 80004fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80004fe:	490b      	ldr	r1, [pc, #44]	; (800052c <set_led_val+0x158>)
 8000500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		LEDS_BUFFER[buffer_index+1] |= ((uint32_t)led_val >> 4); //ultimos 8 bits de led_val van acá
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	3301      	adds	r3, #1
 8000508:	4a08      	ldr	r2, [pc, #32]	; (800052c <set_led_val+0x158>)
 800050a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800050e:	88bb      	ldrh	r3, [r7, #4]
 8000510:	091b      	lsrs	r3, r3, #4
 8000512:	b29b      	uxth	r3, r3
 8000514:	4619      	mov	r1, r3
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	3301      	adds	r3, #1
 800051a:	430a      	orrs	r2, r1
 800051c:	4903      	ldr	r1, [pc, #12]	; (800052c <set_led_val+0x158>)
 800051e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	LEDS_BUFFER[buffer_index] |= ((uint32_t)led_val >> (shift_index-20));
	aa = (shift_index - 26)*2; //-2 o 2 si lo duplico es -4 o 4
	LEDS_BUFFER[buffer_index+1] |= ((uint32_t)led_val << (shift_index - aa));

*/
 }
 8000522:	bf00      	nop
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	200000c4 	.word	0x200000c4

08000530 <enviarDatos>:

 void enviarDatos(void)
 {
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800053a:	4808      	ldr	r0, [pc, #32]	; (800055c <enviarDatos+0x2c>)
 800053c:	f000 fcde 	bl	8000efc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000546:	4805      	ldr	r0, [pc, #20]	; (800055c <enviarDatos+0x2c>)
 8000548:	f000 fcd8 	bl	8000efc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t *)LEDS_BUFFER, 36);
 800054c:	2224      	movs	r2, #36	; 0x24
 800054e:	4904      	ldr	r1, [pc, #16]	; (8000560 <enviarDatos+0x30>)
 8000550:	4804      	ldr	r0, [pc, #16]	; (8000564 <enviarDatos+0x34>)
 8000552:	f001 f957 	bl	8001804 <HAL_SPI_Transmit_DMA>


 }
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40010c00 	.word	0x40010c00
 8000560:	200000c4 	.word	0x200000c4
 8000564:	20000028 	.word	0x20000028

08000568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800056c:	b672      	cpsid	i
}
 800056e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000570:	e7fe      	b.n	8000570 <Error_Handler+0x8>
	...

08000574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800057a:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <HAL_MspInit+0x5c>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <HAL_MspInit+0x5c>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6193      	str	r3, [r2, #24]
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <HAL_MspInit+0x5c>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <HAL_MspInit+0x5c>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <HAL_MspInit+0x5c>)
 8000598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059c:	61d3      	str	r3, [r2, #28]
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <HAL_MspInit+0x5c>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <HAL_MspInit+0x60>)
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <HAL_MspInit+0x60>)
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40010000 	.word	0x40010000

080005d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a29      	ldr	r2, [pc, #164]	; (8000698 <HAL_SPI_MspInit+0xc0>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d14a      	bne.n	800068e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80005f8:	4b28      	ldr	r3, [pc, #160]	; (800069c <HAL_SPI_MspInit+0xc4>)
 80005fa:	69db      	ldr	r3, [r3, #28]
 80005fc:	4a27      	ldr	r2, [pc, #156]	; (800069c <HAL_SPI_MspInit+0xc4>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000602:	61d3      	str	r3, [r2, #28]
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <HAL_SPI_MspInit+0xc4>)
 8000606:	69db      	ldr	r3, [r3, #28]
 8000608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <HAL_SPI_MspInit+0xc4>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <HAL_SPI_MspInit+0xc4>)
 8000616:	f043 0308 	orr.w	r3, r3, #8
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <HAL_SPI_MspInit+0xc4>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0308 	and.w	r3, r3, #8
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000628:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800062c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062e:	2302      	movs	r3, #2
 8000630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	4619      	mov	r1, r3
 800063c:	4818      	ldr	r0, [pc, #96]	; (80006a0 <HAL_SPI_MspInit+0xc8>)
 800063e:	f000 fad9 	bl	8000bf4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <HAL_SPI_MspInit+0xcc>)
 8000644:	4a18      	ldr	r2, [pc, #96]	; (80006a8 <HAL_SPI_MspInit+0xd0>)
 8000646:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <HAL_SPI_MspInit+0xcc>)
 800064a:	2210      	movs	r2, #16
 800064c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <HAL_SPI_MspInit+0xcc>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <HAL_SPI_MspInit+0xcc>)
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_SPI_MspInit+0xcc>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <HAL_SPI_MspInit+0xcc>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <HAL_SPI_MspInit+0xcc>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <HAL_SPI_MspInit+0xcc>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000672:	480c      	ldr	r0, [pc, #48]	; (80006a4 <HAL_SPI_MspInit+0xcc>)
 8000674:	f000 f9d8 	bl	8000a28 <HAL_DMA_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 800067e:	f7ff ff73 	bl	8000568 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <HAL_SPI_MspInit+0xcc>)
 8000686:	649a      	str	r2, [r3, #72]	; 0x48
 8000688:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <HAL_SPI_MspInit+0xcc>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800068e:	bf00      	nop
 8000690:	3720      	adds	r7, #32
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40003800 	.word	0x40003800
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010c00 	.word	0x40010c00
 80006a4:	20000080 	.word	0x20000080
 80006a8:	40020058 	.word	0x40020058

080006ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <NMI_Handler+0x4>

080006b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <HardFault_Handler+0x4>

080006b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <MemManage_Handler+0x4>

080006be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <BusFault_Handler+0x4>

080006c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <UsageFault_Handler+0x4>

080006ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr

080006d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr

080006e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr

080006ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f2:	f000 f875 	bl	80007e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}

080006fa <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
	...

08000708 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000708:	480c      	ldr	r0, [pc, #48]	; (800073c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800070a:	490d      	ldr	r1, [pc, #52]	; (8000740 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800070c:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000720:	4c0a      	ldr	r4, [pc, #40]	; (800074c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800072e:	f7ff ffe4 	bl	80006fa <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000732:	f001 fa5f 	bl	8001bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000736:	f7ff fd09 	bl	800014c <main>
  bx lr
 800073a:	4770      	bx	lr
  ldr r0, =_sdata
 800073c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000740:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000744:	08001c8c 	.word	0x08001c8c
  ldr r2, =_sbss
 8000748:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800074c:	200000ec 	.word	0x200000ec

08000750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC1_2_IRQHandler>
	...

08000754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <HAL_Init+0x28>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_Init+0x28>)
 800075e:	f043 0310 	orr.w	r3, r3, #16
 8000762:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000764:	2003      	movs	r0, #3
 8000766:	f000 f92b 	bl	80009c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800076a:	200f      	movs	r0, #15
 800076c:	f000 f808 	bl	8000780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000770:	f7ff ff00 	bl	8000574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40022000 	.word	0x40022000

08000780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_InitTick+0x54>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_InitTick+0x58>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000796:	fbb3 f3f1 	udiv	r3, r3, r1
 800079a:	fbb2 f3f3 	udiv	r3, r2, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f935 	bl	8000a0e <HAL_SYSTICK_Config>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e00e      	b.n	80007cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b0f      	cmp	r3, #15
 80007b2:	d80a      	bhi.n	80007ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b4:	2200      	movs	r2, #0
 80007b6:	6879      	ldr	r1, [r7, #4]
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295
 80007bc:	f000 f90b 	bl	80009d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c0:	4a06      	ldr	r2, [pc, #24]	; (80007dc <HAL_InitTick+0x5c>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007c6:	2300      	movs	r3, #0
 80007c8:	e000      	b.n	80007cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000000 	.word	0x20000000
 80007d8:	20000008 	.word	0x20000008
 80007dc:	20000004 	.word	0x20000004

080007e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_IncTick+0x1c>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b05      	ldr	r3, [pc, #20]	; (8000800 <HAL_IncTick+0x20>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	4a03      	ldr	r2, [pc, #12]	; (8000800 <HAL_IncTick+0x20>)
 80007f2:	6013      	str	r3, [r2, #0]
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	20000008 	.word	0x20000008
 8000800:	200000e8 	.word	0x200000e8

08000804 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return uwTick;
 8000808:	4b02      	ldr	r3, [pc, #8]	; (8000814 <HAL_GetTick+0x10>)
 800080a:	681b      	ldr	r3, [r3, #0]
}
 800080c:	4618      	mov	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	200000e8 	.word	0x200000e8

08000818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000820:	f7ff fff0 	bl	8000804 <HAL_GetTick>
 8000824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000830:	d005      	beq.n	800083e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000832:	4b0a      	ldr	r3, [pc, #40]	; (800085c <HAL_Delay+0x44>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	461a      	mov	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4413      	add	r3, r2
 800083c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800083e:	bf00      	nop
 8000840:	f7ff ffe0 	bl	8000804 <HAL_GetTick>
 8000844:	4602      	mov	r2, r0
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	429a      	cmp	r2, r3
 800084e:	d8f7      	bhi.n	8000840 <HAL_Delay+0x28>
  {
  }
}
 8000850:	bf00      	nop
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000008 	.word	0x20000008

08000860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800087c:	4013      	ands	r3, r2
 800087e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800088c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000892:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	60d3      	str	r3, [r2, #12]
}
 8000898:	bf00      	nop
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	0a1b      	lsrs	r3, r3, #8
 80008b2:	f003 0307 	and.w	r3, r3, #7
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	6039      	str	r1, [r7, #0]
 80008ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db0a      	blt.n	80008ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	490c      	ldr	r1, [pc, #48]	; (8000910 <__NVIC_SetPriority+0x4c>)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	0112      	lsls	r2, r2, #4
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	440b      	add	r3, r1
 80008e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ec:	e00a      	b.n	8000904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4908      	ldr	r1, [pc, #32]	; (8000914 <__NVIC_SetPriority+0x50>)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	f003 030f 	and.w	r3, r3, #15
 80008fa:	3b04      	subs	r3, #4
 80008fc:	0112      	lsls	r2, r2, #4
 80008fe:	b2d2      	uxtb	r2, r2
 8000900:	440b      	add	r3, r1
 8000902:	761a      	strb	r2, [r3, #24]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000e100 	.word	0xe000e100
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000918:	b480      	push	{r7}
 800091a:	b089      	sub	sp, #36	; 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	f1c3 0307 	rsb	r3, r3, #7
 8000932:	2b04      	cmp	r3, #4
 8000934:	bf28      	it	cs
 8000936:	2304      	movcs	r3, #4
 8000938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3304      	adds	r3, #4
 800093e:	2b06      	cmp	r3, #6
 8000940:	d902      	bls.n	8000948 <NVIC_EncodePriority+0x30>
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3b03      	subs	r3, #3
 8000946:	e000      	b.n	800094a <NVIC_EncodePriority+0x32>
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	f04f 32ff 	mov.w	r2, #4294967295
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43da      	mvns	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	401a      	ands	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000960:	f04f 31ff 	mov.w	r1, #4294967295
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa01 f303 	lsl.w	r3, r1, r3
 800096a:	43d9      	mvns	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	4313      	orrs	r3, r2
         );
}
 8000972:	4618      	mov	r0, r3
 8000974:	3724      	adds	r7, #36	; 0x24
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800098c:	d301      	bcc.n	8000992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098e:	2301      	movs	r3, #1
 8000990:	e00f      	b.n	80009b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <SysTick_Config+0x40>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099a:	210f      	movs	r1, #15
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	f7ff ff90 	bl	80008c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <SysTick_Config+0x40>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <SysTick_Config+0x40>)
 80009ac:	2207      	movs	r2, #7
 80009ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff49 	bl	8000860 <__NVIC_SetPriorityGrouping>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	4603      	mov	r3, r0
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e8:	f7ff ff5e 	bl	80008a8 <__NVIC_GetPriorityGrouping>
 80009ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	6978      	ldr	r0, [r7, #20]
 80009f4:	f7ff ff90 	bl	8000918 <NVIC_EncodePriority>
 80009f8:	4602      	mov	r2, r0
 80009fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff5f 	bl	80008c4 <__NVIC_SetPriority>
}
 8000a06:	bf00      	nop
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff ffb0 	bl	800097c <SysTick_Config>
 8000a1c:	4603      	mov	r3, r0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d101      	bne.n	8000a3e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e043      	b.n	8000ac6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <HAL_DMA_Init+0xa8>)
 8000a46:	4413      	add	r3, r2
 8000a48:	4a22      	ldr	r2, [pc, #136]	; (8000ad4 <HAL_DMA_Init+0xac>)
 8000a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4e:	091b      	lsrs	r3, r3, #4
 8000a50:	009a      	lsls	r2, r3, #2
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a1f      	ldr	r2, [pc, #124]	; (8000ad8 <HAL_DMA_Init+0xb0>)
 8000a5a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2202      	movs	r2, #2
 8000a60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000a72:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	bffdfff8 	.word	0xbffdfff8
 8000ad4:	cccccccd 	.word	0xcccccccd
 8000ad8:	40020000 	.word	0x40020000

08000adc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
 8000ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d101      	bne.n	8000afc <HAL_DMA_Start_IT+0x20>
 8000af8:	2302      	movs	r3, #2
 8000afa:	e04a      	b.n	8000b92 <HAL_DMA_Start_IT+0xb6>
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2201      	movs	r2, #1
 8000b00:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d13a      	bne.n	8000b84 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2202      	movs	r2, #2
 8000b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f022 0201 	bic.w	r2, r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	68b9      	ldr	r1, [r7, #8]
 8000b32:	68f8      	ldr	r0, [r7, #12]
 8000b34:	f000 f831 	bl	8000b9a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d008      	beq.n	8000b52 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f042 020e 	orr.w	r2, r2, #14
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	e00f      	b.n	8000b72 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f022 0204 	bic.w	r2, r2, #4
 8000b60:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f042 020a 	orr.w	r2, r2, #10
 8000b70:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f042 0201 	orr.w	r2, r2, #1
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	e005      	b.n	8000b90 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b085      	sub	sp, #20
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b10      	cmp	r3, #16
 8000bc6:	d108      	bne.n	8000bda <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000bd8:	e007      	b.n	8000bea <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	60da      	str	r2, [r3, #12]
}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b08b      	sub	sp, #44	; 0x2c
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c06:	e169      	b.n	8000edc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	69fa      	ldr	r2, [r7, #28]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	f040 8158 	bne.w	8000ed6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	4a9a      	ldr	r2, [pc, #616]	; (8000e94 <HAL_GPIO_Init+0x2a0>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d05e      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c30:	4a98      	ldr	r2, [pc, #608]	; (8000e94 <HAL_GPIO_Init+0x2a0>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d875      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c36:	4a98      	ldr	r2, [pc, #608]	; (8000e98 <HAL_GPIO_Init+0x2a4>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d058      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c3c:	4a96      	ldr	r2, [pc, #600]	; (8000e98 <HAL_GPIO_Init+0x2a4>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d86f      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c42:	4a96      	ldr	r2, [pc, #600]	; (8000e9c <HAL_GPIO_Init+0x2a8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d052      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c48:	4a94      	ldr	r2, [pc, #592]	; (8000e9c <HAL_GPIO_Init+0x2a8>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d869      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c4e:	4a94      	ldr	r2, [pc, #592]	; (8000ea0 <HAL_GPIO_Init+0x2ac>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d04c      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c54:	4a92      	ldr	r2, [pc, #584]	; (8000ea0 <HAL_GPIO_Init+0x2ac>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d863      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c5a:	4a92      	ldr	r2, [pc, #584]	; (8000ea4 <HAL_GPIO_Init+0x2b0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d046      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c60:	4a90      	ldr	r2, [pc, #576]	; (8000ea4 <HAL_GPIO_Init+0x2b0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d85d      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c66:	2b12      	cmp	r3, #18
 8000c68:	d82a      	bhi.n	8000cc0 <HAL_GPIO_Init+0xcc>
 8000c6a:	2b12      	cmp	r3, #18
 8000c6c:	d859      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c6e:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <HAL_GPIO_Init+0x80>)
 8000c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c74:	08000cef 	.word	0x08000cef
 8000c78:	08000cc9 	.word	0x08000cc9
 8000c7c:	08000cdb 	.word	0x08000cdb
 8000c80:	08000d1d 	.word	0x08000d1d
 8000c84:	08000d23 	.word	0x08000d23
 8000c88:	08000d23 	.word	0x08000d23
 8000c8c:	08000d23 	.word	0x08000d23
 8000c90:	08000d23 	.word	0x08000d23
 8000c94:	08000d23 	.word	0x08000d23
 8000c98:	08000d23 	.word	0x08000d23
 8000c9c:	08000d23 	.word	0x08000d23
 8000ca0:	08000d23 	.word	0x08000d23
 8000ca4:	08000d23 	.word	0x08000d23
 8000ca8:	08000d23 	.word	0x08000d23
 8000cac:	08000d23 	.word	0x08000d23
 8000cb0:	08000d23 	.word	0x08000d23
 8000cb4:	08000d23 	.word	0x08000d23
 8000cb8:	08000cd1 	.word	0x08000cd1
 8000cbc:	08000ce5 	.word	0x08000ce5
 8000cc0:	4a79      	ldr	r2, [pc, #484]	; (8000ea8 <HAL_GPIO_Init+0x2b4>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d013      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cc6:	e02c      	b.n	8000d22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	623b      	str	r3, [r7, #32]
          break;
 8000cce:	e029      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	623b      	str	r3, [r7, #32]
          break;
 8000cd8:	e024      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	3308      	adds	r3, #8
 8000ce0:	623b      	str	r3, [r7, #32]
          break;
 8000ce2:	e01f      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	330c      	adds	r3, #12
 8000cea:	623b      	str	r3, [r7, #32]
          break;
 8000cec:	e01a      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d102      	bne.n	8000cfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	623b      	str	r3, [r7, #32]
          break;
 8000cfa:	e013      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d105      	bne.n	8000d10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d04:	2308      	movs	r3, #8
 8000d06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69fa      	ldr	r2, [r7, #28]
 8000d0c:	611a      	str	r2, [r3, #16]
          break;
 8000d0e:	e009      	b.n	8000d24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d10:	2308      	movs	r3, #8
 8000d12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	615a      	str	r2, [r3, #20]
          break;
 8000d1a:	e003      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
          break;
 8000d20:	e000      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          break;
 8000d22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	2bff      	cmp	r3, #255	; 0xff
 8000d28:	d801      	bhi.n	8000d2e <HAL_GPIO_Init+0x13a>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	e001      	b.n	8000d32 <HAL_GPIO_Init+0x13e>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3304      	adds	r3, #4
 8000d32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	2bff      	cmp	r3, #255	; 0xff
 8000d38:	d802      	bhi.n	8000d40 <HAL_GPIO_Init+0x14c>
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	e002      	b.n	8000d46 <HAL_GPIO_Init+0x152>
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	3b08      	subs	r3, #8
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	210f      	movs	r1, #15
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	401a      	ands	r2, r3
 8000d58:	6a39      	ldr	r1, [r7, #32]
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	431a      	orrs	r2, r3
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 80b1 	beq.w	8000ed6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d74:	4b4d      	ldr	r3, [pc, #308]	; (8000eac <HAL_GPIO_Init+0x2b8>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a4c      	ldr	r2, [pc, #304]	; (8000eac <HAL_GPIO_Init+0x2b8>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b4a      	ldr	r3, [pc, #296]	; (8000eac <HAL_GPIO_Init+0x2b8>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d8c:	4a48      	ldr	r2, [pc, #288]	; (8000eb0 <HAL_GPIO_Init+0x2bc>)
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3302      	adds	r3, #2
 8000d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	220f      	movs	r2, #15
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4013      	ands	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a40      	ldr	r2, [pc, #256]	; (8000eb4 <HAL_GPIO_Init+0x2c0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d013      	beq.n	8000de0 <HAL_GPIO_Init+0x1ec>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a3f      	ldr	r2, [pc, #252]	; (8000eb8 <HAL_GPIO_Init+0x2c4>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d00d      	beq.n	8000ddc <HAL_GPIO_Init+0x1e8>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a3e      	ldr	r2, [pc, #248]	; (8000ebc <HAL_GPIO_Init+0x2c8>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d007      	beq.n	8000dd8 <HAL_GPIO_Init+0x1e4>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a3d      	ldr	r2, [pc, #244]	; (8000ec0 <HAL_GPIO_Init+0x2cc>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d101      	bne.n	8000dd4 <HAL_GPIO_Init+0x1e0>
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e006      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	e004      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000dd8:	2302      	movs	r3, #2
 8000dda:	e002      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e000      	b.n	8000de2 <HAL_GPIO_Init+0x1ee>
 8000de0:	2300      	movs	r3, #0
 8000de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de4:	f002 0203 	and.w	r2, r2, #3
 8000de8:	0092      	lsls	r2, r2, #2
 8000dea:	4093      	lsls	r3, r2
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000df2:	492f      	ldr	r1, [pc, #188]	; (8000eb0 <HAL_GPIO_Init+0x2bc>)
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	3302      	adds	r3, #2
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d006      	beq.n	8000e1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e0c:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	492c      	ldr	r1, [pc, #176]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	600b      	str	r3, [r1, #0]
 8000e18:	e006      	b.n	8000e28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	4928      	ldr	r1, [pc, #160]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e24:	4013      	ands	r3, r2
 8000e26:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d006      	beq.n	8000e42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e34:	4b23      	ldr	r3, [pc, #140]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	4922      	ldr	r1, [pc, #136]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	604b      	str	r3, [r1, #4]
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e42:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	491e      	ldr	r1, [pc, #120]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d006      	beq.n	8000e6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	4918      	ldr	r1, [pc, #96]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	608b      	str	r3, [r1, #8]
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	4914      	ldr	r1, [pc, #80]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e74:	4013      	ands	r3, r2
 8000e76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d021      	beq.n	8000ec8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	490e      	ldr	r1, [pc, #56]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	60cb      	str	r3, [r1, #12]
 8000e90:	e021      	b.n	8000ed6 <HAL_GPIO_Init+0x2e2>
 8000e92:	bf00      	nop
 8000e94:	10320000 	.word	0x10320000
 8000e98:	10310000 	.word	0x10310000
 8000e9c:	10220000 	.word	0x10220000
 8000ea0:	10210000 	.word	0x10210000
 8000ea4:	10120000 	.word	0x10120000
 8000ea8:	10110000 	.word	0x10110000
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010000 	.word	0x40010000
 8000eb4:	40010800 	.word	0x40010800
 8000eb8:	40010c00 	.word	0x40010c00
 8000ebc:	40011000 	.word	0x40011000
 8000ec0:	40011400 	.word	0x40011400
 8000ec4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	4909      	ldr	r1, [pc, #36]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	3301      	adds	r3, #1
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f47f ae8e 	bne.w	8000c08 <HAL_GPIO_Init+0x14>
  }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	372c      	adds	r7, #44	; 0x2c
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	40010400 	.word	0x40010400

08000efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f0c:	787b      	ldrb	r3, [r7, #1]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f12:	887a      	ldrh	r2, [r7, #2]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f18:	e003      	b.n	8000f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	041a      	lsls	r2, r3, #16
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	611a      	str	r2, [r3, #16]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e272      	b.n	8001424 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f000 8087 	beq.w	800105a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f4c:	4b92      	ldr	r3, [pc, #584]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 030c 	and.w	r3, r3, #12
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d00c      	beq.n	8000f72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f58:	4b8f      	ldr	r3, [pc, #572]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 030c 	and.w	r3, r3, #12
 8000f60:	2b08      	cmp	r3, #8
 8000f62:	d112      	bne.n	8000f8a <HAL_RCC_OscConfig+0x5e>
 8000f64:	4b8c      	ldr	r3, [pc, #560]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f70:	d10b      	bne.n	8000f8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f72:	4b89      	ldr	r3, [pc, #548]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d06c      	beq.n	8001058 <HAL_RCC_OscConfig+0x12c>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d168      	bne.n	8001058 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e24c      	b.n	8001424 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f92:	d106      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x76>
 8000f94:	4b80      	ldr	r3, [pc, #512]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a7f      	ldr	r2, [pc, #508]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	e02e      	b.n	8001000 <HAL_RCC_OscConfig+0xd4>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10c      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x98>
 8000faa:	4b7b      	ldr	r3, [pc, #492]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a7a      	ldr	r2, [pc, #488]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	4b78      	ldr	r3, [pc, #480]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a77      	ldr	r2, [pc, #476]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e01d      	b.n	8001000 <HAL_RCC_OscConfig+0xd4>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fcc:	d10c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0xbc>
 8000fce:	4b72      	ldr	r3, [pc, #456]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a71      	ldr	r2, [pc, #452]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	4b6f      	ldr	r3, [pc, #444]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a6e      	ldr	r2, [pc, #440]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e00b      	b.n	8001000 <HAL_RCC_OscConfig+0xd4>
 8000fe8:	4b6b      	ldr	r3, [pc, #428]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a6a      	ldr	r2, [pc, #424]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b68      	ldr	r3, [pc, #416]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a67      	ldr	r2, [pc, #412]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001008:	f7ff fbfc 	bl	8000804 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001010:	f7ff fbf8 	bl	8000804 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b64      	cmp	r3, #100	; 0x64
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e200      	b.n	8001424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001022:	4b5d      	ldr	r3, [pc, #372]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f0      	beq.n	8001010 <HAL_RCC_OscConfig+0xe4>
 800102e:	e014      	b.n	800105a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001030:	f7ff fbe8 	bl	8000804 <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001038:	f7ff fbe4 	bl	8000804 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b64      	cmp	r3, #100	; 0x64
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e1ec      	b.n	8001424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104a:	4b53      	ldr	r3, [pc, #332]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f0      	bne.n	8001038 <HAL_RCC_OscConfig+0x10c>
 8001056:	e000      	b.n	800105a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d063      	beq.n	800112e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001066:	4b4c      	ldr	r3, [pc, #304]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 030c 	and.w	r3, r3, #12
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00b      	beq.n	800108a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001072:	4b49      	ldr	r3, [pc, #292]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 030c 	and.w	r3, r3, #12
 800107a:	2b08      	cmp	r3, #8
 800107c:	d11c      	bne.n	80010b8 <HAL_RCC_OscConfig+0x18c>
 800107e:	4b46      	ldr	r3, [pc, #280]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d116      	bne.n	80010b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108a:	4b43      	ldr	r3, [pc, #268]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d005      	beq.n	80010a2 <HAL_RCC_OscConfig+0x176>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d001      	beq.n	80010a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e1c0      	b.n	8001424 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a2:	4b3d      	ldr	r3, [pc, #244]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	4939      	ldr	r1, [pc, #228]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b6:	e03a      	b.n	800112e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d020      	beq.n	8001102 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c0:	4b36      	ldr	r3, [pc, #216]	; (800119c <HAL_RCC_OscConfig+0x270>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c6:	f7ff fb9d 	bl	8000804 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ce:	f7ff fb99 	bl	8000804 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e1a1      	b.n	8001424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e0:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0f0      	beq.n	80010ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	4927      	ldr	r1, [pc, #156]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	600b      	str	r3, [r1, #0]
 8001100:	e015      	b.n	800112e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <HAL_RCC_OscConfig+0x270>)
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff fb7c 	bl	8000804 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001110:	f7ff fb78 	bl	8000804 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e180      	b.n	8001424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f0      	bne.n	8001110 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	2b00      	cmp	r3, #0
 8001138:	d03a      	beq.n	80011b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d019      	beq.n	8001176 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_RCC_OscConfig+0x274>)
 8001144:	2201      	movs	r2, #1
 8001146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001148:	f7ff fb5c 	bl	8000804 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001150:	f7ff fb58 	bl	8000804 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e160      	b.n	8001424 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <HAL_RCC_OscConfig+0x26c>)
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f0      	beq.n	8001150 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800116e:	2001      	movs	r0, #1
 8001170:	f000 faa6 	bl	80016c0 <RCC_Delay>
 8001174:	e01c      	b.n	80011b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <HAL_RCC_OscConfig+0x274>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117c:	f7ff fb42 	bl	8000804 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001182:	e00f      	b.n	80011a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001184:	f7ff fb3e 	bl	8000804 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d908      	bls.n	80011a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e146      	b.n	8001424 <HAL_RCC_OscConfig+0x4f8>
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	42420000 	.word	0x42420000
 80011a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a4:	4b92      	ldr	r3, [pc, #584]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1e9      	bne.n	8001184 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 80a6 	beq.w	800130a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c2:	4b8b      	ldr	r3, [pc, #556]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10d      	bne.n	80011ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	4b88      	ldr	r3, [pc, #544]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	4a87      	ldr	r2, [pc, #540]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	61d3      	str	r3, [r2, #28]
 80011da:	4b85      	ldr	r3, [pc, #532]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011e6:	2301      	movs	r3, #1
 80011e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ea:	4b82      	ldr	r3, [pc, #520]	; (80013f4 <HAL_RCC_OscConfig+0x4c8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d118      	bne.n	8001228 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011f6:	4b7f      	ldr	r3, [pc, #508]	; (80013f4 <HAL_RCC_OscConfig+0x4c8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a7e      	ldr	r2, [pc, #504]	; (80013f4 <HAL_RCC_OscConfig+0x4c8>)
 80011fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001202:	f7ff faff 	bl	8000804 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120a:	f7ff fafb 	bl	8000804 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b64      	cmp	r3, #100	; 0x64
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e103      	b.n	8001424 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121c:	4b75      	ldr	r3, [pc, #468]	; (80013f4 <HAL_RCC_OscConfig+0x4c8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f0      	beq.n	800120a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d106      	bne.n	800123e <HAL_RCC_OscConfig+0x312>
 8001230:	4b6f      	ldr	r3, [pc, #444]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	4a6e      	ldr	r2, [pc, #440]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6213      	str	r3, [r2, #32]
 800123c:	e02d      	b.n	800129a <HAL_RCC_OscConfig+0x36e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10c      	bne.n	8001260 <HAL_RCC_OscConfig+0x334>
 8001246:	4b6a      	ldr	r3, [pc, #424]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	4a69      	ldr	r2, [pc, #420]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 800124c:	f023 0301 	bic.w	r3, r3, #1
 8001250:	6213      	str	r3, [r2, #32]
 8001252:	4b67      	ldr	r3, [pc, #412]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	4a66      	ldr	r2, [pc, #408]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 8001258:	f023 0304 	bic.w	r3, r3, #4
 800125c:	6213      	str	r3, [r2, #32]
 800125e:	e01c      	b.n	800129a <HAL_RCC_OscConfig+0x36e>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	2b05      	cmp	r3, #5
 8001266:	d10c      	bne.n	8001282 <HAL_RCC_OscConfig+0x356>
 8001268:	4b61      	ldr	r3, [pc, #388]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	4a60      	ldr	r2, [pc, #384]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6213      	str	r3, [r2, #32]
 8001274:	4b5e      	ldr	r3, [pc, #376]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	4a5d      	ldr	r2, [pc, #372]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6213      	str	r3, [r2, #32]
 8001280:	e00b      	b.n	800129a <HAL_RCC_OscConfig+0x36e>
 8001282:	4b5b      	ldr	r3, [pc, #364]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	4a5a      	ldr	r2, [pc, #360]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	f023 0301 	bic.w	r3, r3, #1
 800128c:	6213      	str	r3, [r2, #32]
 800128e:	4b58      	ldr	r3, [pc, #352]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	4a57      	ldr	r2, [pc, #348]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	f023 0304 	bic.w	r3, r3, #4
 8001298:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d015      	beq.n	80012ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a2:	f7ff faaf 	bl	8000804 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a8:	e00a      	b.n	80012c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012aa:	f7ff faab 	bl	8000804 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e0b1      	b.n	8001424 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c0:	4b4b      	ldr	r3, [pc, #300]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0ee      	beq.n	80012aa <HAL_RCC_OscConfig+0x37e>
 80012cc:	e014      	b.n	80012f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ce:	f7ff fa99 	bl	8000804 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d4:	e00a      	b.n	80012ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d6:	f7ff fa95 	bl	8000804 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e09b      	b.n	8001424 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ec:	4b40      	ldr	r3, [pc, #256]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1ee      	bne.n	80012d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d105      	bne.n	800130a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012fe:	4b3c      	ldr	r3, [pc, #240]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	4a3b      	ldr	r2, [pc, #236]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001308:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8087 	beq.w	8001422 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b08      	cmp	r3, #8
 800131e:	d061      	beq.n	80013e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d146      	bne.n	80013b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001328:	4b33      	ldr	r3, [pc, #204]	; (80013f8 <HAL_RCC_OscConfig+0x4cc>)
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132e:	f7ff fa69 	bl	8000804 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001336:	f7ff fa65 	bl	8000804 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e06d      	b.n	8001424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001348:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f0      	bne.n	8001336 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800135c:	d108      	bne.n	8001370 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800135e:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	4921      	ldr	r1, [pc, #132]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a19      	ldr	r1, [r3, #32]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	430b      	orrs	r3, r1
 8001382:	491b      	ldr	r1, [pc, #108]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <HAL_RCC_OscConfig+0x4cc>)
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138e:	f7ff fa39 	bl	8000804 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001396:	f7ff fa35 	bl	8000804 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e03d      	b.n	8001424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x46a>
 80013b4:	e035      	b.n	8001422 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <HAL_RCC_OscConfig+0x4cc>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fa22 	bl	8000804 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c4:	f7ff fa1e 	bl	8000804 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e026      	b.n	8001424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x498>
 80013e2:	e01e      	b.n	8001422 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d107      	bne.n	80013fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e019      	b.n	8001424 <HAL_RCC_OscConfig+0x4f8>
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40007000 	.word	0x40007000
 80013f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_RCC_OscConfig+0x500>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	429a      	cmp	r2, r3
 800140e:	d106      	bne.n	800141e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141a:	429a      	cmp	r2, r3
 800141c:	d001      	beq.n	8001422 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40021000 	.word	0x40021000

08001430 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0d0      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001444:	4b6a      	ldr	r3, [pc, #424]	; (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d910      	bls.n	8001474 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001452:	4b67      	ldr	r3, [pc, #412]	; (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 0207 	bic.w	r2, r3, #7
 800145a:	4965      	ldr	r1, [pc, #404]	; (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	4313      	orrs	r3, r2
 8001460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001462:	4b63      	ldr	r3, [pc, #396]	; (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d001      	beq.n	8001474 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e0b8      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d020      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800148c:	4b59      	ldr	r3, [pc, #356]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4a58      	ldr	r2, [pc, #352]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001496:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a4:	4b53      	ldr	r3, [pc, #332]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	4a52      	ldr	r2, [pc, #328]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b0:	4b50      	ldr	r3, [pc, #320]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	494d      	ldr	r1, [pc, #308]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d040      	beq.n	8001550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d107      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	4b47      	ldr	r3, [pc, #284]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d115      	bne.n	800150e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e07f      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d107      	bne.n	80014fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ee:	4b41      	ldr	r3, [pc, #260]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d109      	bne.n	800150e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e073      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fe:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e06b      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800150e:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f023 0203 	bic.w	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	4936      	ldr	r1, [pc, #216]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001520:	f7ff f970 	bl	8000804 <HAL_GetTick>
 8001524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001526:	e00a      	b.n	800153e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001528:	f7ff f96c 	bl	8000804 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	f241 3288 	movw	r2, #5000	; 0x1388
 8001536:	4293      	cmp	r3, r2
 8001538:	d901      	bls.n	800153e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e053      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153e:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 020c 	and.w	r2, r3, #12
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	429a      	cmp	r2, r3
 800154e:	d1eb      	bne.n	8001528 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001550:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d210      	bcs.n	8001580 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 0207 	bic.w	r2, r3, #7
 8001566:	4922      	ldr	r1, [pc, #136]	; (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d001      	beq.n	8001580 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e032      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4916      	ldr	r1, [pc, #88]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 800159a:	4313      	orrs	r3, r2
 800159c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d009      	beq.n	80015be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	490e      	ldr	r1, [pc, #56]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015be:	f000 f821 	bl	8001604 <HAL_RCC_GetSysClockFreq>
 80015c2:	4602      	mov	r2, r0
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	490a      	ldr	r1, [pc, #40]	; (80015f8 <HAL_RCC_ClockConfig+0x1c8>)
 80015d0:	5ccb      	ldrb	r3, [r1, r3]
 80015d2:	fa22 f303 	lsr.w	r3, r2, r3
 80015d6:	4a09      	ldr	r2, [pc, #36]	; (80015fc <HAL_RCC_ClockConfig+0x1cc>)
 80015d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_RCC_ClockConfig+0x1d0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff f8ce 	bl	8000780 <HAL_InitTick>

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40022000 	.word	0x40022000
 80015f4:	40021000 	.word	0x40021000
 80015f8:	08001c74 	.word	0x08001c74
 80015fc:	20000000 	.word	0x20000000
 8001600:	20000004 	.word	0x20000004

08001604 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001604:	b490      	push	{r4, r7}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800160a:	4b29      	ldr	r3, [pc, #164]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800160c:	1d3c      	adds	r4, r7, #4
 800160e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001614:	f240 2301 	movw	r3, #513	; 0x201
 8001618:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b04      	cmp	r3, #4
 800163c:	d002      	beq.n	8001644 <HAL_RCC_GetSysClockFreq+0x40>
 800163e:	2b08      	cmp	r3, #8
 8001640:	d003      	beq.n	800164a <HAL_RCC_GetSysClockFreq+0x46>
 8001642:	e02b      	b.n	800169c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001644:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001646:	623b      	str	r3, [r7, #32]
      break;
 8001648:	e02b      	b.n	80016a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	0c9b      	lsrs	r3, r3, #18
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	3328      	adds	r3, #40	; 0x28
 8001654:	443b      	add	r3, r7
 8001656:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800165a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d012      	beq.n	800168c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	0c5b      	lsrs	r3, r3, #17
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	3328      	adds	r3, #40	; 0x28
 8001672:	443b      	add	r3, r7
 8001674:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001678:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800167e:	fb03 f202 	mul.w	r2, r3, r2
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	fbb2 f3f3 	udiv	r3, r2, r3
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
 800168a:	e004      	b.n	8001696 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001690:	fb02 f303 	mul.w	r3, r2, r3
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	623b      	str	r3, [r7, #32]
      break;
 800169a:	e002      	b.n	80016a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800169e:	623b      	str	r3, [r7, #32]
      break;
 80016a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016a2:	6a3b      	ldr	r3, [r7, #32]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3728      	adds	r7, #40	; 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc90      	pop	{r4, r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	08001c64 	.word	0x08001c64
 80016b4:	40021000 	.word	0x40021000
 80016b8:	007a1200 	.word	0x007a1200
 80016bc:	003d0900 	.word	0x003d0900

080016c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <RCC_Delay+0x34>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <RCC_Delay+0x38>)
 80016ce:	fba2 2303 	umull	r2, r3, r2, r3
 80016d2:	0a5b      	lsrs	r3, r3, #9
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016dc:	bf00      	nop
  }
  while (Delay --);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1e5a      	subs	r2, r3, #1
 80016e2:	60fa      	str	r2, [r7, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f9      	bne.n	80016dc <RCC_Delay+0x1c>
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	20000000 	.word	0x20000000
 80016f8:	10624dd3 	.word	0x10624dd3

080016fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e076      	b.n	80017fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	2b00      	cmp	r3, #0
 8001714:	d108      	bne.n	8001728 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800171e:	d009      	beq.n	8001734 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
 8001726:	e005      	b.n	8001734 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d106      	bne.n	8001754 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7fe ff42 	bl	80005d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800176a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b8:	ea42 0103 	orr.w	r1, r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	0c1a      	lsrs	r2, r3, #16
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f002 0204 	and.w	r2, r2, #4
 80017da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	69da      	ldr	r2, [r3, #28]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	4613      	mov	r3, r2
 8001810:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <HAL_SPI_Transmit_DMA+0x20>
 8001820:	2302      	movs	r3, #2
 8001822:	e09b      	b.n	800195c <HAL_SPI_Transmit_DMA+0x158>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b01      	cmp	r3, #1
 8001836:	d002      	beq.n	800183e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8001838:	2302      	movs	r3, #2
 800183a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800183c:	e089      	b.n	8001952 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d002      	beq.n	800184a <HAL_SPI_Transmit_DMA+0x46>
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d102      	bne.n	8001850 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800184e:	e080      	b.n	8001952 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2203      	movs	r2, #3
 8001854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	88fa      	ldrh	r2, [r7, #6]
 8001868:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	88fa      	ldrh	r2, [r7, #6]
 800186e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001896:	d10f      	bne.n	80018b8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018bc:	4a29      	ldr	r2, [pc, #164]	; (8001964 <HAL_SPI_Transmit_DMA+0x160>)
 80018be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c4:	4a28      	ldr	r2, [pc, #160]	; (8001968 <HAL_SPI_Transmit_DMA+0x164>)
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018cc:	4a27      	ldr	r2, [pc, #156]	; (800196c <HAL_SPI_Transmit_DMA+0x168>)
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d4:	2200      	movs	r2, #0
 80018d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	4619      	mov	r1, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	330c      	adds	r3, #12
 80018e8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018ee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80018f0:	f7ff f8f4 	bl	8000adc <HAL_DMA_Start_IT>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00c      	beq.n	8001914 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fe:	f043 0210 	orr.w	r2, r3, #16
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8001912:	e01e      	b.n	8001952 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191e:	2b40      	cmp	r3, #64	; 0x40
 8001920:	d007      	beq.n	8001932 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0220 	orr.w	r2, r2, #32
 8001940:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 0202 	orr.w	r2, r2, #2
 8001950:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800195a:	7dfb      	ldrb	r3, [r7, #23]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	08001a4d 	.word	0x08001a4d
 8001968:	080019a7 	.word	0x080019a7
 800196c:	08001a69 	.word	0x08001a69

08001970 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019b4:	f7fe ff26 	bl	8000804 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0320 	and.w	r3, r3, #32
 80019c4:	2b20      	cmp	r3, #32
 80019c6:	d03b      	beq.n	8001a40 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0220 	bic.w	r2, r2, #32
 80019d6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0202 	bic.w	r2, r2, #2
 80019e6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	2164      	movs	r1, #100	; 0x64
 80019ec:	6978      	ldr	r0, [r7, #20]
 80019ee:	f000 f8e3 	bl	8001bb8 <SPI_EndRxTxTransaction>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fc:	f043 0220 	orr.w	r2, r3, #32
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10a      	bne.n	8001a22 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2200      	movs	r2, #0
 8001a26:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8001a38:	6978      	ldr	r0, [r7, #20]
 8001a3a:	f7ff ffab 	bl	8001994 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8001a3e:	e002      	b.n	8001a46 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8001a40:	6978      	ldr	r0, [r7, #20]
 8001a42:	f7ff ff95 	bl	8001970 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7ff ff91 	bl	8001982 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0203 	bic.w	r2, r2, #3
 8001a84:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8a:	f043 0210 	orr.w	r2, r3, #16
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f7ff ff7a 	bl	8001994 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ab8:	f7fe fea4 	bl	8000804 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac0:	1a9b      	subs	r3, r3, r2
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ac8:	f7fe fe9c 	bl	8000804 <HAL_GetTick>
 8001acc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001ace:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	015b      	lsls	r3, r3, #5
 8001ad4:	0d1b      	lsrs	r3, r3, #20
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	fb02 f303 	mul.w	r3, r2, r3
 8001adc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ade:	e054      	b.n	8001b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae6:	d050      	beq.n	8001b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ae8:	f7fe fe8c 	bl	8000804 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	69fa      	ldr	r2, [r7, #28]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d902      	bls.n	8001afe <SPI_WaitFlagStateUntilTimeout+0x56>
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d13d      	bne.n	8001b7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001b0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b16:	d111      	bne.n	8001b3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b20:	d004      	beq.n	8001b2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b2a:	d107      	bne.n	8001b3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b44:	d10f      	bne.n	8001b66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e017      	b.n	8001baa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	4013      	ands	r3, r2
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	bf0c      	ite	eq
 8001b9a:	2301      	moveq	r3, #1
 8001b9c:	2300      	movne	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d19b      	bne.n	8001ae0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3720      	adds	r7, #32
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000000 	.word	0x20000000

08001bb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f7ff ff6a 	bl	8001aa8 <SPI_WaitFlagStateUntilTimeout>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d007      	beq.n	8001bea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bde:	f043 0220 	orr.w	r2, r3, #32
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e000      	b.n	8001bec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <__libc_init_array>:
 8001bf4:	b570      	push	{r4, r5, r6, lr}
 8001bf6:	2600      	movs	r6, #0
 8001bf8:	4d0c      	ldr	r5, [pc, #48]	; (8001c2c <__libc_init_array+0x38>)
 8001bfa:	4c0d      	ldr	r4, [pc, #52]	; (8001c30 <__libc_init_array+0x3c>)
 8001bfc:	1b64      	subs	r4, r4, r5
 8001bfe:	10a4      	asrs	r4, r4, #2
 8001c00:	42a6      	cmp	r6, r4
 8001c02:	d109      	bne.n	8001c18 <__libc_init_array+0x24>
 8001c04:	f000 f822 	bl	8001c4c <_init>
 8001c08:	2600      	movs	r6, #0
 8001c0a:	4d0a      	ldr	r5, [pc, #40]	; (8001c34 <__libc_init_array+0x40>)
 8001c0c:	4c0a      	ldr	r4, [pc, #40]	; (8001c38 <__libc_init_array+0x44>)
 8001c0e:	1b64      	subs	r4, r4, r5
 8001c10:	10a4      	asrs	r4, r4, #2
 8001c12:	42a6      	cmp	r6, r4
 8001c14:	d105      	bne.n	8001c22 <__libc_init_array+0x2e>
 8001c16:	bd70      	pop	{r4, r5, r6, pc}
 8001c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c1c:	4798      	blx	r3
 8001c1e:	3601      	adds	r6, #1
 8001c20:	e7ee      	b.n	8001c00 <__libc_init_array+0xc>
 8001c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c26:	4798      	blx	r3
 8001c28:	3601      	adds	r6, #1
 8001c2a:	e7f2      	b.n	8001c12 <__libc_init_array+0x1e>
 8001c2c:	08001c84 	.word	0x08001c84
 8001c30:	08001c84 	.word	0x08001c84
 8001c34:	08001c84 	.word	0x08001c84
 8001c38:	08001c88 	.word	0x08001c88

08001c3c <memset>:
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4402      	add	r2, r0
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d100      	bne.n	8001c46 <memset+0xa>
 8001c44:	4770      	bx	lr
 8001c46:	f803 1b01 	strb.w	r1, [r3], #1
 8001c4a:	e7f9      	b.n	8001c40 <memset+0x4>

08001c4c <_init>:
 8001c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4e:	bf00      	nop
 8001c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c52:	bc08      	pop	{r3}
 8001c54:	469e      	mov	lr, r3
 8001c56:	4770      	bx	lr

08001c58 <_fini>:
 8001c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c5a:	bf00      	nop
 8001c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c5e:	bc08      	pop	{r3}
 8001c60:	469e      	mov	lr, r3
 8001c62:	4770      	bx	lr
